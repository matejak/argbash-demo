#!/bin/bash

# ARG_POSITIONAL_INF([directory],[directories to list],[0],[.])
# ARG_OPTIONAL_SINGLE([width],[w],[Width of the output])
# ARG_OPTIONAL_BOOLEAN([almost-all],[A],[Omit implicit '.' and '..' directories in the listing])
# ARG_HELP([Script that tells what 'ls' would do.])
# ARG_POSITIONAL_DOUBLEDASH([])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


# # When called, the process ends.
# Args:
# 	$1: The exit message (print to stderr)
# 	$2: The exit code (default is 1)
# if env var _PRINT_HELP is set to 'yes', the usage is print to stderr (prior to $1)
# Example:
# 	test -f "$_arg_infile" || _PRINT_HELP=yes die "Can't continue, have to supply file as an argument, got '$_arg_infile'" 4
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


# Function that evaluates whether a value passed to it begins by a character
# that is a short option of an argument the script knows about.
# This is required in order to support getopts-like short options grouping.
begins_with_short_option()
{
	local first_option all_short_options='wAh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
# The positional args array has to be reset before the parsing, because it may already be defined
# - for example if this script is sourced by an argbash-powered script.
_positionals=()
_arg_directory=(".")
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_width=
_arg_almost_all="off"


# Function that prints general usage of the script.
# This is useful if users asks for it, or if there is an argument parsing error (unexpected / spurious arguments)
# and it makes sense to remind the user how the script is supposed to be called.
print_help()
{
	printf '%s\n' "Script that tells what 'ls' would do."
	printf 'Usage: %s [-w|--width <arg>] [-A|--(no-)almost-all] [-h|--help] [--] [<directory-1>] ... [<directory-n>] ...\n' "$0"
	printf '\t%s\n' "<directory>: directories to list (defaults for <directory>: '.')"
	printf '\t%s\n' "-w, --width: Width of the output (no default)"
	printf '\t%s\n' "-A, --almost-all, --no-almost-all: Omit implicit '.' and '..' directories in the listing (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


# The parsing of the command-line
parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		# If two dashes (i.e. '--') were passed on the command-line,
		# assign the rest of arguments as positional arguments and bail out.
		if test "$_key" = '--'
		then
			shift
			# Handle the case when the double dash is the last argument.
			test $# -gt 0 || break
			_positionals+=("$@")
			_positionals_count=$((_positionals_count + $#))
			shift $(($# - 1))
			_last_positional="$1"
			break
		fi
		case "$_key" in
			# We support whitespace as a delimiter between option argument and its value.
			# Therefore, we expect the --width or -w value.
			# so we watch for --width and -w.
			# Since we know that we got the long or short option,
			# we just reach out for the next argument to get the value.
			-w|--width)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_width="$2"
				shift
				;;
			# We support the = as a delimiter between option argument and its value.
			# Therefore, we expect --width=value, so we watch for --width=*
			# For whatever we get, we strip '--width=' using the ${var##--width=} notation
			# to get the argument value
			--width=*)
				_arg_width="${_key##--width=}"
				;;
			# We support getopts-style short arguments grouping,
			# so as -w accepts value, we allow it to be appended to it, so we watch for -w*
			# and we strip the leading -w from the argument string using the ${var##-w} notation.
			-w*)
				_arg_width="${_key##-w}"
				;;
			# The almost-all argurment doesn't accept a value,
			# we expect the --almost-all or -A, so we watch for them.
			-A|--no-almost-all|--almost-all)
				_arg_almost_all="on"
				test "${1:0:5}" = "--no-" && _arg_almost_all="off"
				;;
			# We support getopts-style short arguments clustering,
			# so as -A doesn't accept value, other short options may be appended to it, so we watch for -A*.
			# After stripping the leading -A from the argument, we have to make sure
			# that the first character that follows coresponds to a short option.
			-A*)
				_arg_almost_all="on"
				_next="${_key##-A}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-A" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			# See the comment of option '--almost-all' to see what's going on here - principle is the same.
			-h|--help)
				print_help
				exit 0
				;;
			# See the comment of option '-A' to see what's going on here - principle is the same.
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


# Take arguments that we have received, and save them in variables of given names.
# The 'eval' command is needed as the name of target variable is saved into another variable.
assign_positional_args()
{
	local _positional_name _shift_for=$1
	# We have an array of variables to which we want to save positional args values.
	# This array is able to hold array elements as targets.
	# As variables don't contain spaces, they may be held in space-separated string.
	_positional_names=""
	# If we allow up to infinitely many args, we calculate how many of values
	# were actually passed, and we extend the target array accordingly.
	# We also know that we have _pos_names_count known positional arguments.
	_our_args=$((${#_positionals[@]} - 0))
	for ((ii = 0; ii < _our_args; ii++))
	do
		_positional_names="$_positional_names _arg_directory[$((ii + 0))]"
	done

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

# Now call all the functions defined above that are needed to get the job done
parse_commandline "$@"
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

#

printf "Will list directories: "
printf "'%s', " "${_arg_directory[@]}"
printf "\n"

if test -n "$_arg_width"
then
	printf "Padding the output to '%d' terminal columns.\n" "$_arg_width"
fi

test "$_arg_almost_all" = on && echo "Omitting implicit '.' and '..' directories in the listing."

#
# ] <-- needed because of Argbash
